<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site – doc主页</title>
    <link>http://localhost:1313/docs/</link>
    <description>Recent content in doc主页 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Feb 2025 16:32:55 +0800</lastBuildDate>
    
	  <atom:link href="http://localhost:1313/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Demo</title>
      <link>http://localhost:1313/docs/demo/</link>
      <pubDate>Tue, 11 Feb 2025 16:36:38 +0800</pubDate>
      
      <guid>http://localhost:1313/docs/demo/</guid>
      <description>
        
        
        &lt;h1&gt;第一个Doc&lt;/h1&gt;&lt;p&gt;12344444223123
公式展示：
$\in \sum_{10}^{100}$
$$\in K_1^2$$
Python代码展示：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;

&lt;div class=&#34;filename not-prose&#34; dir=&#34;auto&#34;&gt;hello.py&lt;/div&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-8&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;title&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;title&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#title&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;展示0&lt;/li&gt;
&lt;li&gt;展示1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表格展示：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;name&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;world_size（ngpus）&lt;/td&gt;
          &lt;td&gt;node中的GPU数量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;rank_data&lt;/td&gt;
          &lt;td&gt;一个分配在GPU上的指针池，其中C++中对RankData的定义是 &lt;code&gt;struct{void * ptrs[8]}&lt;/code&gt;这里取8是因为CustomAllreduce操作支持的最大GPU数量是8，这几个指针分别指向同一node上的多个GPU上的即将用于allreduce操作的输入变量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;ldquo;register&amp;rdquo;&lt;/td&gt;
          &lt;td&gt;下面函数的标识符中有register存在，register应该表示的是： 将内存中的RankData拷贝到GPU显存的rank_data池中&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;handle和ptr&lt;/td&gt;
          &lt;td&gt;handle是通过CUDA进程间通信（IPC）函数获取的返回值，可以传递给其他进程并在其他进程通过OpenIpcHandle打开以获取ptr指针&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/docs/cuda%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/cuda%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid>
      <description>
        
        
        &lt;p&gt;CUDA编程的线程模型如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个线程都有局部内存&lt;/li&gt;
&lt;li&gt;每个thread block都有共享内存
&lt;img src=&#34;https://docs.nvidia.com/cuda/cuda-c-programming-guide/_images/memory-hierarchy.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/docs/customallreduce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/customallreduce/</guid>
      <description>
        
        
        &lt;h1&gt;相关代码&lt;/h1&gt;&lt;p&gt;vllm&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;_custom_ops.py&lt;/li&gt;
&lt;li&gt;distributed
&lt;ul&gt;
&lt;li&gt;parallel_state.py&lt;/li&gt;
&lt;li&gt;device_communicators
&lt;ul&gt;
&lt;li&gt;custom_all_reduce.py
csrc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;custom_all_reduce.cuh&lt;/li&gt;
&lt;li&gt;custom_all_reduce.cu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键细节可以直接跳转到：&lt;a href=&#34;#ReduceScatter&#34; &gt;Reduce Scatter&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;符号解释&lt;/h1&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;name&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;world_size（ngpus）&lt;/td&gt;
          &lt;td&gt;node中的GPU数量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;rank_data&lt;/td&gt;
          &lt;td&gt;一个分配在GPU上的指针池，其中C++中对RankData的定义是 &lt;code&gt;struct{void * ptrs[8]}&lt;/code&gt;这里取8是因为CustomAllreduce操作支持的最大GPU数量是8，这几个指针分别指向同一node上的多个GPU上的即将用于allreduce操作的输入变量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;ldquo;register&amp;rdquo;&lt;/td&gt;
          &lt;td&gt;下面函数的标识符中有register存在，register应该表示的是： 将内存中的RankData拷贝到GPU显存的rank_data池中&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;handle和ptr&lt;/td&gt;
          &lt;td&gt;handle是通过CUDA进程间通信（IPC）函数获取的返回值，可以传递给其他进程并在其他进程通过OpenIpcHandle打开以获取ptr指针&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;API overview&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#create_shared_buffer&#34; &gt;create_shared_buffer&lt;/a&gt;/free_shared_buffer ：	创建、释放共享内存（GPU上的内存）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#capture&#34; &gt;capture&lt;/a&gt;: @contextmanager	The main responsibility of this context manager is the &lt;code&gt;register_graph_buffers&lt;/code&gt; call at the end of the context.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#register_graph_buffers&#34; &gt;register_graph_buffers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;should_custom_ar	：判断是否应该使用custom_all_reduce&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#all_reduce&#34; &gt;all_reduce&lt;/a&gt; :custom_all_reduce调用的函数，调用了cuda定义的函数&lt;/li&gt;
&lt;li&gt;custom_all_reduce	对外调用的接口&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#is_weak_contiguous&#34; &gt;is_weak_contiguous&lt;/a&gt;(Tensor): 判断Tensor是否“弱连续”&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Details&lt;/h1&gt;&lt;h2&gt;&lt;strong&gt;is_weak_contiguous&lt;/strong&gt;&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;is_weak_contiguous&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#is_weak_contiguous&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;判断一个Tensor是否为“弱连续”，弱连续的条件比&lt;code&gt;torch.Tensor.is_contiguous&lt;/code&gt;宽松一些，代码如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;definition&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;

&lt;pre&gt;&lt;code&gt;def is_weak_contiguous(inp: torch.Tensor):

return inp.is_contiguous() or (inp.storage().nbytes() -

inp.storage_offset() * inp.element_size()

== inp.numel() * inp.element_size())&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;如果输入张量在内存中分布“没有间隔”，而且处于整个已分配空间的最后一部分，那么&lt;code&gt;is_weak_contiguous&lt;/code&gt;返回值为True，如下图所示：此时is_weak_contiguous返回值为False
![[Pasted image 20241218185931.png]]&lt;/li&gt;
&lt;li&gt;如下图所示，此时&lt;code&gt;is_weak_contiguous&lt;/code&gt;返回True
![[Pasted image 20241218190221.png]]
例如下面的程序输出为False，但是is_weak_contiguous输出为True，&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;

&lt;pre&gt;&lt;code&gt;import torch

# example 1 矩阵转置操作会导致is_contiguous返回False，
# 但是is_weak_contiguous返回值仍然为True
x = torch.randn(2, 2)
y = x.transpose(0, 1)
print(y.is_contiguous()) # False
print(is_weak_contiguous(y)) # True

# example 2 处于整个Tensor的后半部分，且内存连续的tensor
a = torch.randn(8)
b = a[8:16].reshape(4, 2).transpose(0, 1)
c = a[0:8].reshape(4, 2).transpose(0, 1)
print(is_contiguous(b)) # True
print(is_contiguous(c)) # False&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这个函数会在is_contiguous()返回值为False时继续判断，如果输入的Tensor在分配的内存中处于最后一段而且在内存中连续，则返回True&lt;/p&gt;
&lt;p&gt;此函数的作用：
进行进程间通信时需要使用$getMemHandle$，获取到的Handle是指向预分配内存起始地址的Handle，需要有一个offset表示输入Tensor相对这个起始地址的偏移量&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;create_shared_buffer&lt;/strong&gt;&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;create_shared_buffer&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#create_shared_buffer&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;返回字段&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;类型&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;ptrs&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;List[int]&lt;/td&gt;
          &lt;td&gt;一个指针数组，元素个数为world_size&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;创建共享内存并返回指向共享内存的指针$ptrs$,其中调用了CUDA内存分配函数，并使用OpenIpcHandle打开了其他同一node上其他设备的共享内存handle。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;capture&lt;/strong&gt;:&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;capture&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#capture&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这个函数是一个 &lt;code&gt;@contextmanager&lt;/code&gt;，主要目的是在graph_capture最后调用 &lt;code&gt;register_graph_buffers&lt;/code&gt;，将所有allreduce用到的输入地址注册到rank_data中。&lt;/p&gt;
&lt;p&gt;解释：这个函数仅用于CUDA graph模式中，在CUDA graph 模式中，所有的操作不会立即被执行，CUDA会根据操作预先构建计算图，并一次性提交到GPU中执行，其中allreduce操作进行进程间通信需要将input注册到 &lt;code&gt;rank_data&lt;/code&gt;中，这个注册的操作不会每次调用allreduce都执行一次，会在调用allreduce时将需要注册的ptr存入一个待注册数组（&lt;code&gt;graph_unreg_buffers_&lt;/code&gt;）中，等到调用 &lt;code&gt;register_graph_buffers&lt;/code&gt;时再将这些未被注册的ptr 进行 1. allgather获取其他进程中的handles。 2. 将这些获取到的handles打开并注册到 &lt;code&gt;rank_data&lt;/code&gt;中&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;register_graph_buffers&lt;/strong&gt;&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;register_graph_buffers&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#register_graph_buffers&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;总是在capture上下文的最后调用，将capture上下文中执行的Allreduce代码中需要的input全部通过open_ipc_handle进行注册&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;

&lt;pre&gt;&lt;code&gt;@contextmanager
def capture(self):
	try:
		self._IS_CAPTURING = True
		yield
	finally:
		self._IS_CAPTURING = False
		if not self.disabled:
			self.register_graph_buffers()&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;strong&gt;all_reduce&lt;/strong&gt;&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;all_reduce&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#all_reduce&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;先进行一个条件的判断（是否处于CUDA graph 模式）如果不处于CUDA graph 模式，直接将input拷贝到预先分配的GPU buffer中，如果处于CUDA graph模式，直接input放入 &lt;code&gt;graph_unreg_buffers_&lt;/code&gt;并进行allreduce操作。前面解释了这样做的原因&lt;/p&gt;
&lt;p&gt;在C++函数内部有更细节的处理：&lt;/p&gt;
&lt;p&gt;如果满足一些特定条件（full_nvlink_且输入Tensor比较大，在world_size&amp;lt;=4时的阈值为512KB，world_size&amp;lt;=8时的阈值为256KB），将调用 &lt;code&gt;cross_device_reduce_2stage&lt;/code&gt;（CUDA核函数），否则调用 &lt;code&gt;cross_device_reduce_1stage&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cross_device_reduce_2stage&lt;/code&gt;详细解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;stage 1: reduce scatter&lt;/strong&gt;
首先，节点中的所有GPU只负责一部分的reduce，比如对于一个GPU的rank=rank，它负责处理 &lt;code&gt;input[start:end]&lt;/code&gt; ，其中&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-apache&#34; data-lang=&#34;apache&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;part = size / ngpus; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;start = rank * part ; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;end = rank == world_size - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ? size : start + part; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;将这一部分reduce之后的结果放入一个预先分配的shared_memory中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;stage 2: allgather.&lt;/strong&gt;
每个GPU读取shared_memory 中的数据，并将这些数据copy到result（最终的返回结果)中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重要代码简化版（部分同步代码省略）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-apache&#34; data-lang=&#34;apache&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;for (int idx = start + tid; idx &amp;lt; end; idx += stride) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;将&lt;/span&gt;reduce结果存入保存中间结果的共享内存
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tmp_shared_buf[rank][idx] = packed_reduce(ptrs,idx);//
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;第2阶段：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-apache&#34; data-lang=&#34;apache&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; allgather操作
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;for (int idx = tid; idx &amp;lt; largest_part; idx += stride) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    for (int i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; ngpus; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        int gather_from_rank = ((rank + i) % ngpus);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        if (gather_from_rank == ngpus - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; || idx &amp;lt; part) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            int dst_idx = gather_from_rank * part + idx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;result[dst_idx]&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;tmp_shared_buf[i][idx];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;关于第二阶段的同步操作，非常重要：
visibility across devices is only guaranteed between threads that have the same tid.&lt;/p&gt;
&lt;h1&gt;ReduceScatter&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2024/png/32583568/1734110259288-a5efb5c4-9ab3-486c-9797-80a81cfa3363.png?x-oss-process=image%2Fformat%2Cwebp&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;
四个设备的&lt;code&gt;reduce scatte&lt;/code&gt;示意图&lt;/p&gt;
&lt;p&gt;第一阶段： &lt;code&gt;reduce&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如上图所示，一个待reduce的Tensor，假设有4个设备rank1 2 3 4，在第一阶段时，每个GPU负责一个部分的reduce，如GPU1负责A区域的reduce，GPU2负责B区域以此类推。&lt;/li&gt;
&lt;li&gt;reduce结束后，每个GPU上的都得到了最终reduce结果的一部分（保存在临时缓冲区），将它们allgather之后就完成了全部的reduce&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二阶段： &lt;code&gt;allgather&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这里顺序有一定的讲究，比如rank2在allgaher操作时，读取的顺序依次是B C D A，因为rank2中已经有B的reduce结果了，rank3的顺序是 C D A B，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个阶段中的线程（GPU线程）同步操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最简单的同步操作：
给所有线程设置一个&lt;code&gt;barrier&lt;/code&gt;，等所有GPU上的所有线程都&lt;code&gt;reduce&lt;/code&gt;结束后再进行第二阶段的&lt;code&gt;allgather&lt;/code&gt;操作，但是显然这样的同步操作拖累了性能，造成了不必要的等待。&lt;/li&gt;
&lt;li&gt;vllm的同步操作实现：
假设一个节点内有4个GPU，需要&lt;code&gt;allreduce&lt;/code&gt;的&lt;code&gt;input&lt;/code&gt;张量大小为403，即&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;

&lt;pre&gt;&lt;code&gt;world_size = 4
tensor.size() = 403&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;那么，除了最后一个GPU，其余GPU负责的区域大小都是 403 / 4 = 100，最后一个GPU负责的区域大小是103&lt;/li&gt;
&lt;li&gt;对一个进程内部，假设有10个线程，那么tid（GPU线程id）为1的就负责处理【1，11，21，&amp;hellip;，91，101（如果有）】&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一个进程中，tid=1 的线程，在&lt;code&gt;allgather&lt;/code&gt;阶段，只需要其他进程中&lt;code&gt;tid&lt;/code&gt;相同的线程&lt;code&gt;reduce&lt;/code&gt;的结果，所以一个线程 tid=1 的线程只需要等待其他 $tid=1,rank\in [0,ngpus]$ 线程reduce结束后就可以进行&lt;code&gt;allgather&lt;/code&gt;操作。
也就是说，GPU1中的线程1要等待所有GPU中的tid为1的线程&lt;code&gt;reduce&lt;/code&gt;操作结束之后才能进行第二阶段的&lt;code&gt;allgather&lt;/code&gt;操作。&lt;/p&gt;
&lt;p&gt;但是在源码中，一个allreduce操作使用的GPU中的线程数量最高达到 $36 \times 512$  个，如果为这些线程全部设置同步操作，GPU之间的开销未免有些大（$36 \times 512$ 个线程全部都要与其他GPU的线程进行通信）。所以，源码中的实现采取的操作是：让一个block中的前&lt;code&gt;ngpus&lt;/code&gt;个线程去与其他GPU通信。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;省流版：&lt;/strong&gt;
简单来说，一个GPU中有多个线程 （36 * 512个），这些线程被分成多个block(36个)，每个block有多个thread（512个），其中线程同步只能发生在block内
所以上面的步骤可以说成是每个block派 &lt;code&gt;ngpus&lt;/code&gt; 个线程与其他GPU进行同步操作，然后block内的线程再进行同步。&lt;/p&gt;
&lt;h1&gt;QA&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Question 1：&lt;/strong&gt;
（这里我对源代码比较有疑问的一个点是：既然第二阶段&lt;code&gt;allgather&lt;/code&gt;只有&lt;code&gt;read&lt;/code&gt;操作，为什么还要将第一阶段的结果保存到临时缓冲区中而不是直接保存到最终的结果&lt;code&gt;result&lt;/code&gt;中？ 直接保存到&lt;code&gt;result&lt;/code&gt;中感觉不会影响第二阶段的&lt;code&gt;allgather&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;已解决：&lt;/strong&gt;
这里进行运算操作时，只有input张量和临时缓冲区是被注册到shared_buffer中的，其他进程访问不到&lt;code&gt;result&lt;/code&gt;张量。如果每次进行&lt;code&gt;allreduce&lt;/code&gt;都注册一个&lt;code&gt;result&lt;/code&gt;变量作为共享内存，会增加进程间通信开销（在进程间传递shared_memory句柄）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Question 2：&lt;/strong&gt;
CustomAllreduce的代码执行之前会有判断当前的张量并行数是否是&lt;code&gt;[2, 4, 6, 8]&lt;/code&gt;，只有这几种数量的GPU且支持nvlink而且支持p2p通信才能进行CustomAllreduce，但是阅读了所有相关代码后发现代码逻辑中并没有出现与这些数相关的逻辑，只支持&lt;code&gt;[2, 4, 6, 8]&lt;/code&gt;是否和nvlink拓扑结构有关？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;未解决&lt;/strong&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/docs/vllmnccl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/vllmnccl/</guid>
      <description>
        
        
        &lt;p&gt;vllm尝试使用了许多使用NCCL的方式，但是都没有很好的解决问题，最后使用Python脚本写了一个wrapper直接绑定NCCL的动态库。&lt;/p&gt;
&lt;p&gt;vllm中处理allreduce的优先级是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CustomAllreduce&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Pynccl&lt;/li&gt;
&lt;li&gt;torch.distributed
其中，只有CustomAllreduce是out-place的，Pynccl和torch.distributed是in-place的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;torch.distributed在最后被考虑，因为：&lt;code&gt;torch.distributed.all_reduce&lt;/code&gt; 包含许多其他潜在的 CUDA API，这些 API 在捕获 CUDA 图时是不允许的。&lt;/p&gt;
&lt;h2&gt;pynccl_wrapper.py中的解释&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;pynccl_wrapperpy中的解释&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#pynccl_wrapperpy%e4%b8%ad%e7%9a%84%e8%a7%a3%e9%87%8a&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这个文件是一个 &lt;strong&gt;纯 Python 封装&lt;/strong&gt; 的 NCCL 库。&lt;br&gt;
其主要目的是将 NCCL 与 &lt;strong&gt;CUDA 图（CUDA graph）&lt;/strong&gt; 结合使用。&lt;/p&gt;
&lt;p&gt;在编写此脚本之前，我们尝试了以下方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;尝试使用 &lt;code&gt;cupy&lt;/code&gt;&lt;/strong&gt;：&lt;br&gt;
虽然 &lt;code&gt;cupy&lt;/code&gt; 能够正确调用 NCCL，但它自身在初始化 NCCL 通信器时经常会出现卡住的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;尝试使用 &lt;code&gt;torch.distributed&lt;/code&gt;&lt;/strong&gt;：&lt;br&gt;
但是 &lt;code&gt;torch.distributed.all_reduce&lt;/code&gt; 包含许多其他潜在的 CUDA API，这些 API 在捕获 CUDA 图时是不允许的。&lt;br&gt;
详细信息请参考链接：&lt;br&gt;
&lt;a href=&#34;https://discuss.pytorch.org/t/pytorch-cudagraph-with-nccl-operation-failed/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://discuss.pytorch.org/t/pytorch-cudagraph-with-nccl-operation-failed/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;另一个被否决的方案&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;另一个被否决的方案&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%8f%a6%e4%b8%80%e4%b8%aa%e8%a2%ab%e5%90%a6%e5%86%b3%e7%9a%84%e6%96%b9%e6%a1%88&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;我们也考虑过为 NCCL 编写一个 &lt;strong&gt;C/C++ 绑定&lt;/strong&gt;，这种方案通常是可行的，&lt;br&gt;
但我们经常会遇到与 NCCL 版本相关的问题，并且需要在不同版本的 NCCL 之间切换。&lt;br&gt;
详细信息请参考链接：&lt;br&gt;
&lt;a href=&#34;https://github.com/NVIDIA/nccl/issues/1234&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/NVIDIA/nccl/issues/1234&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C/C++ 绑定不够灵活，因为每次切换 NCCL 版本时都需要重新编译代码。&lt;br&gt;
相比之下，这个当前实现的 &lt;strong&gt;纯 Python 封装&lt;/strong&gt; 更加灵活。&lt;br&gt;
我们可以通过更改环境变量 &lt;code&gt;VLLM_NCCL_SO_PATH&lt;/code&gt;，或者代码中的 &lt;code&gt;so_file&lt;/code&gt; 变量，轻松地在不同版本的 NCCL 之间进行切换。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
